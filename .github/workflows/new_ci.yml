name: CMake CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-nix:
    name: Build on Linux & macOS
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfltk1.3-dev libtbb-dev cmake

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install fltk tbb cmake

      - name: Configure & build
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_CXX_EXTENSIONS=OFF \
            -DCMAKE_CXX_FLAGS="-O3 -ffast-math -s"
          cmake --build build --config Release --parallel $(nproc)

      - name: Upload shark binary
        uses: actions/upload-artifact@v4
        with:
          name: shark-${{ matrix.os }}
          path: build/shark*

  build-win:
    name: Build on Windows (MinGW)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-fltk
            mingw-w64-x86_64-tbb
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ntldd-git

      - name: Configure & build
        shell: msys2 {0}
        run: |
          mkdir -p build
          cd build
          cmake -G "MinGW Makefiles" .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_CXX_EXTENSIONS=OFF \
            -DCMAKE_CXX_FLAGS="-O3 -ffast-math -s"
          mingw32-make -j$(nproc)

      - name: Copy required DLLs
        shell: msys2 {0}
        run: |
          cd build
          for exe in $(find . -maxdepth 1 -name "*.exe"); do
            echo "Processing $exe"
            ntldd "$exe" | awk '{if ($3 ~ "/mingw64/") print $3}' | while read -r dll; do
              if [ -f "$dll" ]; then
                echo "Copying $dll"
                cp -v "$dll" .
              fi
            done
          done

      - name: Verify no missing DLLs
        shell: msys2 {0}
        run: |
          cd build
          for exe in $(find . -maxdepth 1 -name "*.exe"); do
            echo "Verifying $exe"
            ntldd "$exe" | grep "not found" && echo "❌ Missing DLLs!" && exit 1 || echo "✅ All DLLs present."
          done

      - name: Upload Windows bundle
        uses: actions/upload-artifact@v4
        with:
          name: shark-windows
          path: build/*
          compression-level: 9
