name: CMake CI

on:
  push:
    tags:
      - 'v*'

jobs:
  build-mac:
    name: Build on macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install dependencies (macOS)
        run: |
          brew update
          brew install fltk tbb cmake

      - name: Configure & build
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_CXX_EXTENSIONS=OFF \
            -DCMAKE_CXX_FLAGS="-O3 -ffast-math"
          cmake --build build --config Release --parallel $(sysctl -n hw.logicalcpu)

      - name: Verify static linking (macOS)
        run: |
          echo "Checking linked libraries on macOS"
          otool -L build/shark | grep -E 'fltk|tbb' && {
            echo "❌ Linked to shared FLTK or TBB"
            exit 1
          } || echo "✅ Static linking confirmed"

      - name: Upload macOS binary
        uses: actions/upload-artifact@v4
        with:
          name: shark-macos
          path: build/shark

  build-win:
    name: Build on Windows (MinGW)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-fltk
            mingw-w64-x86_64-tbb
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ntldd-git

      - name: Configure & build
        shell: msys2 {0}
        run: |
          mkdir -p build
          cd build
          cmake -G "MinGW Makefiles" .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=20 \
            -DCMAKE_CXX_EXTENSIONS=OFF \
            -DCMAKE_CXX_FLAGS="-O3 -ffast-math -s"
          mingw32-make -j$(nproc)

      - name: Copy required DLLs
        shell: msys2 {0}
        run: |
          cd build
          for lib in \
            /mingw64/bin/libgcc_s_seh-1.dll \
            /mingw64/bin/libstdc++-6.dll \
            /mingw64/bin/libwinpthread-1.dll \
            /mingw64/bin/libfltk*.dll \
            /mingw64/bin/libtbb*.dll; do
            [ -f "$lib" ] && cp -u -v "$lib" .
          done

          for exe in $(find . -maxdepth 1 -name "*.exe"); do
            echo "Scanning $exe for dependencies..."
            ntldd "$exe" | awk '{print $3}' | while read -r dll; do
              if [[ -f "$dll" && "$dll" != /c/Windows/* && "$dll" != /C/Windows/* ]]; then
                cp -u -v "$dll" .
              else
                echo "Skipping system DLL: $dll"
              fi
            done
          done

      - name: Verify no missing DLLs
        shell: msys2 {0}
        run: |
          cd build
          FAIL=0
          for exe in $(find . -maxdepth 1 -name "*.exe"); do
            echo "Verifying $exe"
            if ntldd "$exe" | grep "not found"; then
              echo "❌ Missing DLLs in $exe"
              FAIL=1
            else
              echo "✅ All DLLs found for $exe"
            fi
          done
          exit $FAIL

      - name: Upload Windows bundle
        uses: actions/upload-artifact@v4
        with:
          name: shark-windows
          path: build/*

  release:
    name: Publish GitHub Release
    needs: [build-mac, build-win]
    runs-on: ubuntu-latest
    steps:
      - name: Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: shark-macos
          path: ./mac

      - name: Download Windows files
        uses: actions/download-artifact@v4
        with:
          name: shark-windows
          path: ./win

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload macOS binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mac/shark
          asset_name: shark-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows executable to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./win/shark.exe
          asset_name: shark-windows.exe
          asset_content_type: application/vnd.microsoft.portable-executable
