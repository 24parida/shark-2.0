name: CMake CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      # 1) Fetch your code + submodules
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      # 2) Install system deps on Linux & macOS
      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "$(uname)" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y libfltk1.3-dev libtbb-dev cmake
          else
            brew update
            brew install fltk tbb cmake
          fi

      # 3) Bootstrap & install FLTK/TBB via vcpkg on Windows
      - name: Setup vcpkg & install ports (Windows)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11

      # 4) Clean out any stale build dir
      - name: Cleanup old build dir
        run: rm -rf build

      # 5) Configure CMake
      - name: Configure with CMake
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            $( [[ "${{ runner.os }}" == "Windows" ]] \
               && echo "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows" \
               || echo "")

      # 6) Build
      - name: Build
        run: cmake --build build --config Release

      # 7) Verify output exists
      - name: List build dir
        run: ls -l build

      # 8) Publish your binary
      - name: Upload shark binary
        uses: actions/upload-artifact@v4
        with:
          name: shark-${{ matrix.os }}
          path: build/shark*
